Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
	SELECT COUNT(*)
	FROM attribute;

ii. Business table = 10000
	SELECT COUNT(*)
	FROM business;

iii. Category table = 10000
	SELECT COUNT(*)
	FROM category;

iv. Checkin table = 10000
	SELECT COUNT(*)
	FROM checkin;

v. elite_years table = 10000
	SELECT COUNT(*)
	FROM elite_years;

vi. friend table = 10000
	SELECT COUNT(*)
	FROM friend;

vii. hours table = 10000
	SELECT COUNT(*)
	FROM hours;

viii. photo table = 10000
	SELECT COUNT(*)
	FROM photo;

ix. review table = 10000
	SELECT COUNT(*)
	FROM review;
	
x. tip table = 10000
	SELECT COUNT(*)
	FROM tip;
	
xi. user table = 10000
	SELECT COUNT(*)
	FROM table;
	
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
	SELECT COUNT(DISTINCT bz.id)
	FROM business as bz;

ii. Hours = 1562
	SELECT COUNT(DISTINCT business_id)
	FROM hours;

iii. Category = 2643
	SELECT COUNT(DISTINCT business_id)
	FROM category;

iv. Attribute = 1115
	SELECT COUNT(DISTINCT business_id)
	FROM attribute;

v. Review
	id = 10000
	business_id = 8090
	user_id = 9581

	SELECT COUNT(DISTINCT id) as ID
		, COUNT(DISTINCT business_id) as bz_id
		, COUNT(DISTINCT user_id) as u_id
	FROM review;

vi. Checkin = 493
	SELECT COUNT(DISTINCT business_id) as bz_id
	FROM checkin;

vii. Photo
	id = 10000
	business_id = 6493

	SELECT COUNT(DISTINCT id) as ID
		, COUNT(DISTINCT business_id) as bz_id
	FROM photo;

viii. Tip 
	user_id = 537
	business_id = 3973

	SELECT COUNT(DISTINCT user_id) as u_ID
		, COUNT(DISTINCT business_id) as bz_id
	FROM tip;

ix. User = 10000
	SELECT COUNT(DISTINCT id) as ID
	FROM user;

x. Friend = 11
	SELECT COUNT(DISTINCT user_id) as u_ID
	FROM friend;

xi. Elite_years = 2780
	SELECT COUNT(DISTINCT user_id) as u_ID
	FROM elite_years;

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	

	SQL code used to arrive at answer:
	SELECT COUNT(*) as null_val
	FROM user
	WHERE (id IS NULL) OR 
		(name IS NULL) OR 
		(review_count IS NULL) OR 
		(yelping_since IS NULL) OR
		(useful IS NULL) OR 
		(funny IS NULL) OR 
		(cool IS NULL) OR 
		(fans IS NULL) OR 
		(average_stars IS NULL) OR 
		(compliment_hot IS NULL) OR
		(compliment_more IS NULL) OR 
		(compliment_profile IS NULL) OR 
		(compliment_cute IS NULL) OR 
		(compliment_list IS NULL) OR 
		(compliment_note IS NULL) OR 
		(compliment_plain IS NULL) OR 
		(compliment_cool IS NULL) OR 
		(compliment_funny IS NULL) OR 
		(compliment_writer IS NULL) OR 
		(compliment_photos IS NULL);
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5 		avg: 3.7082

		SELECT MIN(stars) as min_stars
			, MAX(stars) as max_stars
			, AVG(stars) as avg_stars
		FROM review;
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
		SELECT MIN(stars) as min_stars
			, MAX(stars) as max_stars
			, AVG(stars) as avg_stars
		FROM business;
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144

		SELECT MIN(likes) as min_likes
			, MAX(likes) as max_likes
			, AVG(likes) as avg_likes
		FROM tip;
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414

		SELECT MIN(likes) as min_likes
			, MAX(likes) as max_likes
			, AVG(likes) as avg_likes
		FROM tip;
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995

		SELECT MIN(review_count) as min_review_count
			, MAX(review_count) as max_review_count
			, AVG(review_count) as avg_review_count
		FROM user;
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city as City
		, SUM(review_count) as No_of_reviews
	FROM business
	GROUP BY city
	ORDER BY no_of_reviews DESC;
	
	Copy and Paste the Result Below:

	+-----------------+---------------+
	| City            | no_of_reviews |
	+-----------------+---------------+
	| Las Vegas       |         82854 |
	| Phoenix         |         34503 |
	| Toronto         |         24113 |
	| Scottsdale      |         20614 |
	| Charlotte       |         12523 |
	| Henderson       |         10871 |
	| Tempe           |         10504 |
	| Pittsburgh      |          9798 |
	| Montréal        |          9448 |
	| Chandler        |          8112 |
	| Mesa            |          6875 |
	| Gilbert         |          6380 |
	| Cleveland       |          5593 |
	| Madison         |          5265 |
	| Glendale        |          4406 |
	| Mississauga     |          3814 |
	| Edinburgh       |          2792 |
	| Peoria          |          2624 |
	| North Las Vegas |          2438 |
	| Markham         |          2352 |
	| Champaign       |          2029 |
	| Stuttgart       |          1849 |
	| Surprise        |          1520 |
	| Lakewood        |          1465 |
	| Goodyear        |          1155 |
	+-----------------+---------------+
	(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars as star_rating
    , SUM(review_count) as count
FROM business
WHERE city == "Avon"
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars as star_rating
    , SUM(review_count) as count
FROM business
WHERE city == "Beachwood"
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name as Name
		, review_count as No_of_reviews
	FROM user
	ORDER BY No_of_reviews DESC
	LIMIT 3
		
	Copy and Paste the Result Below:
	
	+--------+---------------+
	| Name   | No_of_reviews |
	+--------+---------------+
	| Gerald |          2000 |
	| Sara   |          1629 |
	| Yuri   |          1339 |
	+--------+---------------+


8. Does posing more reviews correlate with more fans?

	No, posing more reviews doesn't correlate with more no of fans.
	When no of fans was ordered in descending order the no of No of reviews
	doesn't gives the same indication.

	Please explain your findings and interpretation of the results:
	
	SELECT name as Name
		, review_count as No_of_reviews
		, fans as No_of_fans
	FROM user
	ORDER BY No_of_fans DESC;

	+-----------+---------------+------------+
	| Name      | No_of_reviews | No_of_fans |
	+-----------+---------------+------------+
	| Amy       |           609 |        503 |
	| Mimi      |           968 |        497 |
	| Harald    |          1153 |        311 |
	| Gerald    |          2000 |        253 |
	| Christine |           930 |        173 |
	| Lisa      |           813 |        159 |
	| Cat       |           377 |        133 |
	| William   |          1215 |        126 |
	| Fran      |           862 |        124 |
	| Lissa     |           834 |        120 |
	| Mark      |           861 |        115 |
	| Tiffany   |           408 |        111 |
	| bernice   |           255 |        105 |
	| Roanna    |          1039 |        104 |
	| Angela    |           694 |        101 |
	| .Hon      |          1246 |        101 |
	| Ben       |           307 |         96 |
	| Linda     |           584 |         89 |
	| Christina |           842 |         85 |
	| Jessica   |           220 |         84 |
	| Greg      |           408 |         81 |
	| Nieves    |           178 |         80 |
	| Sui       |           754 |         78 |
	| Yuri      |          1339 |         76 |
	| Nicole    |           161 |         73 |
	+-----------+---------------+------------+
	(Output limit exceeded, 25 of 10000 total rows shown)
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: yes (reviews with love = 1780, reviews with hate = 232)

	
	SQL code used to arrive at answer:

	SELECT 
		(
			SELECT COUNT(*)
			FROM review
			WHERE text LIKE '%love%'
		) as Reviews_with_love
		,
		(
			SELECT COUNT(*)
			FROM review
			WHERE text LIKE '%hate%'
		) as Reviews_with_hate 
	FROM review
	GROUP BY Reviews_with_hate, Reviews_with_love
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name as Name
		, fans as No_of_fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10

	Copy and Paste the Result Below:

	+-----------+------------+
	| Name      | No_of_fans |
	+-----------+------------+
	| Amy       |        503 |
	| Mimi      |        497 |
	| Harald    |        311 |
	| Gerald    |        253 |
	| Christine |        173 |
	| Lisa      |        159 |
	| Cat       |        133 |
	| William   |        126 |
	| Fran      |        124 |
	| Lissa     |        120 |
	+-----------+------------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?


ii. Do the two groups you chose to analyze have a different number of reviews?
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
         
ii. Difference 2:
         
         
         
SQL code used for analysis:

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset: